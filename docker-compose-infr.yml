services:
    
  eureka.server:
    container_name: eureka.server
    build:
      context: App/Infrastructure/Microservices.Demo.Eureka.Server
      dockerfile: Dockerfile
    image: eureka.server:1.0.0
    restart: always
    environment:
      SPRING_APPLICATION_NAME: "eureka.server"
      EUREKA_CLIENT_REGISTRATION_WITH_EUREKA: "false"      
      SERVICE_NAME: Eureka.Server
      ENVIRONMENT: production
      SERVER_PORT: 8761
    ports:
      - 8761:8761
    mem_limit: 256m
    networks:
      - backend
  config.server:
    container_name: config.server
    build:
      context: App/Infrastructure/Microservices.Demo.Config.Server
      dockerfile: Dockerfile
    image: config.server:1.0.0
    restart: always
    environment:
      SERVER_PORT: 8889
      SPRING_APPLICATION_NAME: "Config.Server"
      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: "https://github.com/Claud-Native-Academy/Config-Server-Repository-202504.git"
      SPRING_CLOUD_CONFIG_SERVER_GIT_SEARCH_PATHS: "{application}"
      SPRING_CLOUD_CONFIG_SERVER_GIT_DEFAULTLABEL: "main"
      EUREKA_INSTANCE_APPNAME: "Config.Server"
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"      
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka.server:8761/eureka/"
      SERVICE_NAME: Config.Server
      ENVIRONMENT: production
    ports:
      - 8889:8889
    mem_limit: 256m
    networks:
      - backend
  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: App/Infrastructure/Microservices.Demo.Gateway/Dockerfile
    image: gateway:1.0.0
    restart: always
    deploy:
      replicas: 1
    environment:
      SPRING__APPLICATION__NAME: Gateway
      SPRING__CLOUD__TIMEOUT: 60000
      SPRING__CLOUD__CONFIG__DISCOVERY__ENABLED: true
      SPRING__CLOUD__CONFIG__DISCOVERY__SERVICEID: Config.Server
      SPRING__CLOUD__CONFIG__RETRY__ENABLED: true
      SPRING__CLOUD__CONFIG__FAILFAST: true
      EUREKA__CLIENT__SERVICEURL: "http://eureka.server:8761/eureka"      
      EUREKA__INSTANCE__APPNAME: "gateway"
      EUREKA__INSTANCE__PORT: 8080
      EUREKA__INSTANCE__PREFERIPADDRESS: true
    ports:
      - 8990:8080    
    mem_limit: 256m
    networks:
      - backend
  identity:
    container_name: identity
    image: quay.io/keycloak/keycloak:26.1.4
    command:
      - start-dev
    mem_limit: 256m
    restart: always
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres-idp:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=Password1234
      - KC_TRANSACTION_XA_ENABLED=false
    volumes:
      - ./App/Platform/Microservices.Demo.IdP/Keycloak/Drivers:/opt/keycloak/providers      
    ports:
      - 8992:8080
    networks:
      - backend
  
  kafka:
    image: 'bitnami/kafka:3.6.2'
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT      
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - 9092:9092
      - 9094:9094
    mem_limit: 512m
    networks:
      - backend
  
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - 8090:8080    
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    mem_limit: 200m
    networks:
      - backend


networks:
  backend:
    name: backend
    driver: bridge



#curl -X PUT "localhost:9200/policyreadmodel/_settings" -H 'Content-Type: application/json' -d '{"number_of_replicas": 0}'
